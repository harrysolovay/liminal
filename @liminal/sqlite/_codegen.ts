import { Command, FileSystem, Path } from "@effect/platform"
import { BunContext } from "@effect/platform-bun"
import * as Array from "effect/Array"
import * as Console from "effect/Console"
import * as Effect from "effect/Effect"
import { flow } from "effect/Function"
import * as String from "effect/String"

Effect.gen(function*() {
  yield* Command.string(
    Command.make(
      "bun",
      "drizzle-kit",
      "generate",
      "--schema",
      "tables",
      "--out",
      "migrations",
      "--dialect",
      "sqlite",
    ),
  ).pipe(
    Effect.flatMap(Console.log),
  )
  const fs = yield* FileSystem.FileSystem
  const path = yield* Path.Path
  const statements = yield* fs.readDirectory("migrations").pipe(
    Effect.flatMap(flow(
      Array.filter((v) => v.endsWith(".sql")),
      Array.map(flow(
        (v) => path.join("migrations", v),
        fs.readFileString,
        Effect.map(flow(
          String.trim,
          String.replaceAll("`", "\\`"),
          String.replaceAll("CREATE TABLE", "CREATE TABLE IF NOT EXISTS"),
          String.split("--> statement-breakpoint"),
        )),
      )),
      (v) => Effect.all(v, { concurrency: "unbounded" }),
    )),
    Effect.map(Array.flatten),
  )
  yield* fs.writeFileString(
    "statements.ts",
    `// Generated by \`@liminal/sqlite/_codegen.ts\`
export const statements = [
  \`${statements.join("`,\n  `")}\`
]
`,
  )
}).pipe(
  Effect.provide(BunContext.layer),
  Effect.runFork,
)
