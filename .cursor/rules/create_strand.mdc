---
description:
globs:
alwaysApply: false
---
You've been tasked with authoring a "strand" or conversation component. Let's reason about the participants, conversation control flow and branching.
Next let's implement the conversation as a Liminal strand.

## Conversation Specification

## Message Roles

In the following strand definition, we seed the conversation with an initial "user" message and then produce an "assistant" message. "user" messages are messages that we create and add to the conversation. "assistant" messages are messages that we ask the language model to add to the conversation. In the case of an assistant message, we can capture the message as follows.

```ts
L.strand(function*() {
  yield* L.user`<seed>`
  const reply = yield* L.assistant
  // Still just one participant.
})
```

As you can see, `user` vs. `assistant` correspond to language model input and output respectively

## Language Model Replying to Itself

We often want to use an assistant message within a subsequent user message (aka. prompt chaining).

```ts
L.strand(function*() {
  yield* L.user`In one word, how do you feel today?`
  const reply = yield* L.assistant
  yield L.user`You said you feel ${reply}... why do you feel this way?`
})
```

We can use model outputs to inform subsequent inputs.

## Child Strands

Often times, we'll want to "think" through a conversation before making a move. In these cases, we can utilize child strands––which contain an isolated copy of the current message state––to conduct a child conversation that culimates in some value to be used in the conversation.

```ts
L.strand(function*() {
  yield* L.user`<some-unknown-input>`
  // Check if it's inappropriate before further processing
  const isInappropriate = yield* L.strand(function*() {
    yield* L.user`Is the previous message inappropriate?`
    return yield* L.boolean
  })

  // If inappropriate, emit the reason for early return and then return.
  if (isInappropriate) {
    // pretend `EndingBecauseOfRudenessEvent` is a constructor in scope.
    // More on events later.
    yield* L.emit(new EndingBecauseOfRudenessEvent())
    return
  }

  // Otherwise, get the language model's response and return that.
  const reply = yield* L.assistant
  return reply
})
```

## Participants

In conversations like the ones above, there is a single participant, which uses the language model to infer replies which it can then use to progress the conversation. This may be a little confusing given that the participant's messages are derived from the language model's messages, which are derived from itself and so forth... but the thing to remember is this: if we want the "participants" of a conversation to have distinct identities, we need to explicitly declare their identities as part of the message. We use "persona prompting." An example of where this is useful is in crafting a debate. We can use XML tags to delineate information from our participants.

```ts
L.strand(function*() {
  yield* L.user`
    <proponent>
    Argue in favor
    </proponent>
    <opponent>
    Argue against
    </opponent>
  `
  // continued...
})
```

When we wish to add messages to the conversation from the perspective a given participant, we can wrap it with a tag corresponding to that participant.

```ts
yield* L.user`
  <proponent>
  My opening argument is...
  </proponent>
`
```

## Events

When there is a meaningful turn or development in a conversation, we should emit a corresponding event so that observers can learn about how the conversation state has changed. This means we must think through the core events that will be emitted during the runtime of the strand.

```ts
yield* L.emit(new ProponentOpeningArgumentMade())
```

## Human Input

In some cases you may wish to ask for additional information from the human host. In these cases, you can simply use the built-in `prompt` mechanism. Let's do this.

```ts
const who = prompt("Who made the most compelling arguments so far? The proponent or opponent?")!
yield* L.user`The host prefers the argument from ${who}. Therefore, the other participant will go first in providing their closing argument.`
```

## Putting It All Together

### Step 1.

Create a unique symbol representing the strand.

```ts
const MyStrandKey: unique symbol = Symbol()
```

### Step 2.

Think through and define events corresponding to important milestones in the conversation.

```ts
class ProponentOpeningArgumentMade extends EventBase(MyStrandKey, "proponent_opening_argument_made") {}
class OponentOpeningArgumentMade extends EventBase(MyStrandKey, "Oponent_opening_argument_made") {}
// more...
```

### Step 3.

Determine any configuration or parameters that should affect the behavior of the conversation. For example, we need to be able to specify the topic, decide on the number and role of debaters, specify the number of debate rounds, and possibly any additional goals for the debate.

```ts
export interface DebateConfig {
  topic: string
  debaters?: Array<{
    debaterId: string
    role: string
  }>
  rounds?: number | undefined
  goals?: Array<string> | undefined
}
```

### Step 4.

Think through the control flow of this conversation. Think through where and how child strands might be useful. Think through whether there is a single participant or multiple participants. Then implement a function that accepts the configuration object and returns the conversation as a strand.

```ts
export function debate(config: DebateConfig) {
  return L.strand(function*() {
    // Define any variables necessary for tracking conversation state. For example:
    const turns: Array<DebateTurn> = []

    // Give the language model any core instructions.
    L.system`
      You are about to participate in a debate. Each debater will present arguments and rebuttals on the following topic.
      The debate will be synthesized at the end. Each debater should be persuasive, thorough, and concise, and should stick
      to their assigned role. ${goals?.length ? `Debate goals:\n\n${goals.join("\n\n")}` : ""}
    `

    // Initial arguments wherein each debater presents their initial argument.
    for (const debater of debaters) {
      // ...
      yield* L.event(new OpeningArgumentMade())
    }

    // debate continues...
  })
}
```
